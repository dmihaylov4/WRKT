//
//  TestExtensions.swift
//  WRKTTests
//
//  Common extensions for testing
//

import Foundation
@testable import WRKT

// MARK: - Equatable Conformance for Testing

extension SetInput: Equatable {
    public static func == (lhs: SetInput, rhs: SetInput) -> Bool {
        lhs.reps == rhs.reps &&
        lhs.weight == rhs.weight &&
        lhs.tag == rhs.tag &&
        lhs.autoWeight == rhs.autoWeight &&
        lhs.didSeedFromMemory == rhs.didSeedFromMemory &&
        lhs.isCompleted == rhs.isCompleted &&
        lhs.isGhost == rhs.isGhost &&
        lhs.isAutoGeneratedPlaceholder == rhs.isAutoGeneratedPlaceholder
    }
}

extension WorkoutEntry: Equatable {
    public static func == (lhs: WorkoutEntry, rhs: WorkoutEntry) -> Bool {
        lhs.id == rhs.id &&
        lhs.exerciseID == rhs.exerciseID &&
        lhs.exerciseName == rhs.exerciseName &&
        lhs.muscleGroups == rhs.muscleGroups &&
        lhs.sets == rhs.sets &&
        lhs.activeSetIndex == rhs.activeSetIndex
    }
}

extension CurrentWorkout: Equatable {
    public static func == (lhs: CurrentWorkout, rhs: CurrentWorkout) -> Bool {
        lhs.id == rhs.id &&
        abs(lhs.startedAt.timeIntervalSince(rhs.startedAt)) < 1.0 &&
        lhs.entries == rhs.entries &&
        lhs.plannedWorkoutID == rhs.plannedWorkoutID
    }
}

extension Exercise: Equatable {
    public static func == (lhs: Exercise, rhs: Exercise) -> Bool {
        lhs.id == rhs.id &&
        lhs.name == rhs.name &&
        lhs.force == rhs.force &&
        lhs.level == rhs.level &&
        lhs.mechanic == rhs.mechanic &&
        lhs.equipment == rhs.equipment &&
        lhs.secondaryEquipment == rhs.secondaryEquipment &&
        lhs.grip == rhs.grip &&
        lhs.primaryMuscles == rhs.primaryMuscles &&
        lhs.secondaryMuscles == rhs.secondaryMuscles &&
        lhs.tertiaryMuscles == rhs.tertiaryMuscles &&
        lhs.instructions == rhs.instructions &&
        lhs.images == rhs.images &&
        lhs.category == rhs.category &&
        lhs.subregionTags == rhs.subregionTags
    }
}

// MARK: - Storage Types Equatable Conformance

extension StorageMetadata: Equatable {
    public static func == (lhs: StorageMetadata, rhs: StorageMetadata) -> Bool {
        lhs.version == rhs.version &&
        abs(lhs.lastModified.timeIntervalSince(rhs.lastModified)) < 1.0 &&
        lhs.itemCount == rhs.itemCount
    }
}

extension WorkoutStorageContainer: Equatable {
    public static func == (lhs: WorkoutStorageContainer, rhs: WorkoutStorageContainer) -> Bool {
        lhs.metadata == rhs.metadata &&
        lhs.workouts == rhs.workouts &&
        lhs.prIndex == rhs.prIndex
    }
}

extension CompletedWorkout: Equatable {
    public static func == (lhs: CompletedWorkout, rhs: CompletedWorkout) -> Bool {
        lhs.id == rhs.id &&
        abs(lhs.date.timeIntervalSince(rhs.date)) < 1.0 &&
        lhs.entries == rhs.entries &&
        lhs.plannedWorkoutID == rhs.plannedWorkoutID &&
        lhs.matchedHealthKitUUID == rhs.matchedHealthKitUUID
    }
}

extension LastSetV2: Equatable {
    public static func == (lhs: LastSetV2, rhs: LastSetV2) -> Bool {
        abs(lhs.date.timeIntervalSince(rhs.date)) < 1.0 &&
        lhs.reps == rhs.reps &&
        lhs.weightKg == rhs.weightKg
    }
}

extension ExercisePRsV2: Equatable {
    public static func == (lhs: ExercisePRsV2, rhs: ExercisePRsV2) -> Bool {
        lhs.bestPerReps == rhs.bestPerReps &&
        lhs.bestE1RM == rhs.bestE1RM &&
        lhs.lastWorking == rhs.lastWorking &&
        lhs.allTimeBest == rhs.allTimeBest &&
        datesEqual(lhs.firstRecorded, rhs.firstRecorded)
    }

    private static func datesEqual(_ d1: Date?, _ d2: Date?) -> Bool {
        guard let d1 = d1, let d2 = d2 else {
            return d1 == nil && d2 == nil
        }
        return abs(d1.timeIntervalSince(d2)) < 1.0
    }
}
