//
//  WorkoutEntryTests.swift
//  WRKTTests
//
//  Tests for WorkoutEntry and related models
//

import XCTest
@testable import WRKT

final class WorkoutEntryTests: WRKTTestCase {

    // MARK: - SetTag Tests

    func testSetTagLabels() {
        XCTAssertEqual(SetTag.warmup.label, "Warm-up")
        XCTAssertEqual(SetTag.working.label, "Working")
        XCTAssertEqual(SetTag.backoff.label, "Back-off")
    }

    func testSetTagShortLabels() {
        XCTAssertEqual(SetTag.warmup.short, "WU")
        XCTAssertEqual(SetTag.working.short, "WK")
        XCTAssertEqual(SetTag.backoff.short, "BO")
    }

    func testSetTagNext() {
        XCTAssertEqual(SetTag.warmup.next(), .working)
        XCTAssertEqual(SetTag.working.next(), .backoff)
        XCTAssertEqual(SetTag.backoff.next(), .warmup)
    }

    func testSetTagCodable() {
        let tag = SetTag.working
        assertCodable(tag)
    }

    // MARK: - SetInput Tests

    func testSetInputDefaultValues() {
        let set = SetInput(reps: 10, weight: 50)

        XCTAssertEqual(set.reps, 10)
        XCTAssertEqual(set.weight, 50)
        XCTAssertEqual(set.tag, .working)
        XCTAssertTrue(set.autoWeight)
        XCTAssertFalse(set.didSeedFromMemory)
        XCTAssertFalse(set.isCompleted)
        XCTAssertFalse(set.isGhost)
        XCTAssertFalse(set.isAutoGeneratedPlaceholder)
    }

    func testSetInputCustomValues() {
        let set = SetInput(
            reps: 5,
            weight: 100,
            tag: .warmup,
            autoWeight: false,
            didSeedFromMemory: true,
            isCompleted: true,
            isGhost: false,
            isAutoGeneratedPlaceholder: true
        )

        XCTAssertEqual(set.reps, 5)
        XCTAssertEqual(set.weight, 100)
        XCTAssertEqual(set.tag, .warmup)
        XCTAssertFalse(set.autoWeight)
        XCTAssertTrue(set.didSeedFromMemory)
        XCTAssertTrue(set.isCompleted)
        XCTAssertFalse(set.isGhost)
        XCTAssertTrue(set.isAutoGeneratedPlaceholder)
    }

    func testSetInputCodable() {
        let set = SetInput(
            reps: 8,
            weight: 75.5,
            tag: .backoff,
            autoWeight: false,
            didSeedFromMemory: true,
            isCompleted: true
        )

        assertCodable(set)
    }

    func testSetInputDecodesLegacyData() throws {
        // Legacy data without new fields
        let json = """
        {
            "reps": 10,
            "weight": 60.0,
            "tag": "working"
        }
        """

        let decoder = JSONDecoder()
        let data = json.data(using: .utf8)!
        let set = try decoder.decode(SetInput.self, from: data)

        XCTAssertEqual(set.reps, 10)
        XCTAssertEqual(set.weight, 60.0)
        XCTAssertEqual(set.tag, .working)
        XCTAssertTrue(set.autoWeight) // Should use default
        XCTAssertFalse(set.didSeedFromMemory) // Should use default
        XCTAssertFalse(set.isCompleted) // Should use default
    }

    func testSetInputDecodesWithMissingTag() throws {
        let json = """
        {
            "reps": 10,
            "weight": 60.0
        }
        """

        let decoder = JSONDecoder()
        let data = json.data(using: .utf8)!
        let set = try decoder.decode(SetInput.self, from: data)

        XCTAssertEqual(set.tag, .working) // Should default to working
    }

    // MARK: - WorkoutEntry Tests

    func testWorkoutEntryCreation() {
        let entry = WorkoutEntry(
            id: UUID(),
            exerciseID: "bench-press",
            exerciseName: "Bench Press",
            muscleGroups: ["chest", "triceps"],
            sets: [
                SetInput(reps: 10, weight: 20),
                SetInput(reps: 8, weight: 60)
            ],
            activeSetIndex: 0
        )

        XCTAssertEqual(entry.exerciseID, "bench-press")
        XCTAssertEqual(entry.exerciseName, "Bench Press")
        XCTAssertEqual(entry.muscleGroups, ["chest", "triceps"])
        XCTAssertEqual(entry.sets.count, 2)
        XCTAssertEqual(entry.activeSetIndex, 0)
    }

    func testWorkoutEntryCodable() {
        let entry = TestFixtures.benchPressEntry
        assertCodable(entry)
    }

    func testWorkoutEntryWithMultipleSets() {
        let sets = [
            SetInput(reps: 10, weight: 20, tag: .warmup),
            SetInput(reps: 8, weight: 60, tag: .working),
            SetInput(reps: 8, weight: 60, tag: .working),
            SetInput(reps: 12, weight: 50, tag: .backoff)
        ]

        let entry = WorkoutEntry(
            id: UUID(),
            exerciseID: "test-exercise",
            exerciseName: "Test Exercise",
            muscleGroups: ["test"],
            sets: sets,
            activeSetIndex: 2
        )

        XCTAssertEqual(entry.sets.count, 4)
        XCTAssertEqual(entry.activeSetIndex, 2)
        XCTAssertEqual(entry.sets[0].tag, .warmup)
        XCTAssertEqual(entry.sets[1].tag, .working)
        XCTAssertEqual(entry.sets[3].tag, .backoff)
    }

    // MARK: - WeightUnit Tests

    func testWeightUnitCases() {
        XCTAssertEqual(WeightUnit.allCases.count, 2)
        XCTAssertTrue(WeightUnit.allCases.contains(.kg))
        XCTAssertTrue(WeightUnit.allCases.contains(.lb))
    }

    func testWeightUnitCodable() {
        assertCodable(WeightUnit.kg)
        assertCodable(WeightUnit.lb)
    }

    func testWeightUnitRawValues() {
        XCTAssertEqual(WeightUnit.kg.rawValue, "kg")
        XCTAssertEqual(WeightUnit.lb.rawValue, "lb")
    }
}
